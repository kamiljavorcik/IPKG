// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace ExcerciseOne.WebApp.Services.WebApi
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Database.
    /// </summary>
    public static partial class DatabaseExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ApiParking> GetParkings(this IDatabase operations)
            {
                return Task.Factory.StartNew(s => ((IDatabase)s).GetParkingsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiParking>> GetParkingsAsync(this IDatabase operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParkingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parkingId'>
            /// </param>
            public static ApiParking GetParking(this IDatabase operations, int parkingId)
            {
                return Task.Factory.StartNew(s => ((IDatabase)s).GetParkingAsync(parkingId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parkingId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiParking> GetParkingAsync(this IDatabase operations, int parkingId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetParkingWithHttpMessagesAsync(parkingId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parking'>
            /// </param>
            public static void SetParking(this IDatabase operations, ApiParking parking)
            {
                Task.Factory.StartNew(s => ((IDatabase)s).SetParkingAsync(parking), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parking'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetParkingAsync(this IDatabase operations, ApiParking parking, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetParkingWithHttpMessagesAsync(parking, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ApiVehicle> GetVehicles(this IDatabase operations)
            {
                return Task.Factory.StartNew(s => ((IDatabase)s).GetVehiclesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiVehicle>> GetVehiclesAsync(this IDatabase operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVehiclesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// </param>
            public static ApiVehicle GetVehicle(this IDatabase operations, int vehicleId)
            {
                return Task.Factory.StartNew(s => ((IDatabase)s).GetVehicleAsync(vehicleId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicleId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiVehicle> GetVehicleAsync(this IDatabase operations, int vehicleId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVehicleWithHttpMessagesAsync(vehicleId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicle'>
            /// </param>
            public static void SetVehicle(this IDatabase operations, ApiVehicle vehicle)
            {
                Task.Factory.StartNew(s => ((IDatabase)s).SetVehicleAsync(vehicle), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vehicle'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetVehicleAsync(this IDatabase operations, ApiVehicle vehicle, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetVehicleWithHttpMessagesAsync(vehicle, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ApiRoute> GetRoutes(this IDatabase operations)
            {
                return Task.Factory.StartNew(s => ((IDatabase)s).GetRoutesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiRoute>> GetRoutesAsync(this IDatabase operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRoutesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// </param>
            public static ApiRoute GetRoute(this IDatabase operations, int routeId)
            {
                return Task.Factory.StartNew(s => ((IDatabase)s).GetRouteAsync(routeId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='routeId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiRoute> GetRouteAsync(this IDatabase operations, int routeId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRouteWithHttpMessagesAsync(routeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='route'>
            /// </param>
            public static void SetRoute(this IDatabase operations, ApiRoute route)
            {
                Task.Factory.StartNew(s => ((IDatabase)s).SetRouteAsync(route), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='route'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetRouteAsync(this IDatabase operations, ApiRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.SetRouteWithHttpMessagesAsync(route, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ApiSummary> GetSummary(this IDatabase operations)
            {
                return Task.Factory.StartNew(s => ((IDatabase)s).GetSummaryAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiSummary>> GetSummaryAsync(this IDatabase operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSummaryWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
